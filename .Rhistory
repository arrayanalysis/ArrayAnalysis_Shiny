center = TRUE,
scale = TRUE) # Variables are scaled to unit variance
# Combine sample info in PCA scores
plotPCA <- as.data.frame(pca$x)
# Add sample information to dataframe
if (all(rownames(plotPCA) == dna_seq$ensembl_transcript_id)){
plotPCA <- cbind(plotPCA, dna_seq[,1:4])
}
ggplot(plotPCA, aes(x = PC1, y = PC2, color = hgnc_symbol)) +
geom_point()
ggplot(plotPCA, aes(x = PC1, y = PC2, color = transcript_biotype)) +
geom_point()
seqData <- data.frame(matrix(NA,nrow = length(nt_combination), ncol = nrow(dna_seq)))
for (j in 1:nrow(dna_seq)){
seqData[,j] <- str_count(dna_seq$cdna[j], nt_combination)#/nchar(dna_seq$cdna[j])
}
colnames(seqData) <- dna_seq$ensembl_transcript_id
rownames(seqData) <- nt_combination
rowvar <- apply(seqData,1,var)
seqData <- seqData[rowvar != 0,]
pca <- prcomp(t(seqData),
retx = TRUE, # Give rotated variables (PCA loadings)
center = TRUE,
scale = TRUE) # Variables are scaled to unit variance
# Combine sample info in PCA scores
plotPCA <- as.data.frame(pca$x)
# Add sample information to dataframe
if (all(rownames(plotPCA) == dna_seq$ensembl_transcript_id)){
plotPCA <- cbind(plotPCA, dna_seq[,1:4])
}
ggplot(plotPCA, aes(x = PC1, y = PC2, color = hgnc_symbol)) +
geom_point()
ggplot(plotPCA, aes(x = PC1, y = PC2, color = transcript_biotype)) +
geom_point()
ggplot(plotPCA, aes(x = PC2, y = PC3, color = transcript_biotype)) +
geom_point()
ggplot(plotPCA, aes(x = PC4, y = PC3, color = transcript_biotype)) +
geom_point()
seqData <- data.frame(matrix(NA,nrow = length(nt_combination), ncol = nrow(dna_seq)))
for (j in 1:nrow(dna_seq)){
seqData[,j] <- str_count(dna_seq$cdna[j], nt_combination)/nchar(dna_seq$cdna[j])
}
colnames(seqData) <- dna_seq$ensembl_transcript_id
rownames(seqData) <- nt_combination
rowvar <- apply(seqData,1,var)
seqData <- seqData[rowvar != 0,]
pca <- prcomp(t(seqData),
retx = TRUE, # Give rotated variables (PCA loadings)
center = TRUE,
scale = TRUE) # Variables are scaled to unit variance
# Combine sample info in PCA scores
plotPCA <- as.data.frame(pca$x)
# Add sample information to dataframe
if (all(rownames(plotPCA) == dna_seq$ensembl_transcript_id)){
plotPCA <- cbind(plotPCA, dna_seq[,1:4])
}
ggplot(plotPCA, aes(x = PC1, y = PC2, color = hgnc_symbol)) +
geom_point()
gene_length <- nchar(dna_seq$cdna)
test <- str_split(dna_seq$cdna, "ATG")
View(test)
test[[1]]
length(test)
nchar(str_split(dna_seq$cdna, "ATG")[[1]][1])
i = 1
str_split(dna_seq$cdna, "ATG")[[i]][1]
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
start_position <- rep(NA, nrow(dna_seq))
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
stop1 <- nchar(str_split(seq_postStart, "TAA")[[1]][1])
stop2 <- nchar(str_split(seq_postStart, "TAG")[[1]][1])
stop3 <- nchar(str_split(seq_postStart, "TGA")[[1]][1])
str_split_fixed("kaas",n = 2)
str_split_fixed("kaas","",n = 2)
sst <- strsplit("ATGCAG", "")[[1]]
out <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
sst <- strsplit("ATGCAGTTGAGCGGG", "")[[1]]
out <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
str_detect(c("kaas", "boter", "ei", "boter")
)
str_detect(c("kaas", "boter", "ei"), "boter")
which(str_detect(c("kaas", "boter", "ei"), "boter"))
which(c(FALSE, FALSE, FALSE))
which(c(FALSE, FALSE, FALSE))*3
which(c(FALSE, FALSE, TRUE))*3
gene_length <- nchar(dna_seq$cdna)
start_position <- rep(NA, nrow(dna_seq))
stop_position <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
sst <- strsplit(seq_postStart, "")[[1]]
codons <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
stop1 <- 3*(which(str_detect(codons, "TAA"))-1)
stop1 <- 3*(which(str_detect(codons, "TAG"))-1)
stop1 <- 3*(which(str_detect(codons, "TGA"))-1)
#stop1 <- nchar(str_split(seq_postStart, "TAA")[[1]][1])
#stop2 <- nchar(str_split(seq_postStart, "TAG")[[1]][1])
#stop3 <- nchar(str_split(seq_postStart, "TGA")[[1]][1])
stop_position[i] <- min(stop1, stop2, stop3)
}
stop_position
gene_length <- nchar(dna_seq$cdna)
start_position <- rep(NA, nrow(dna_seq))
stop_position <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
sst <- strsplit(seq_postStart, "")[[1]]
codons <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
stop1 <- 3*(which(str_detect(codons, "TAA"))-1)
stop2 <- 3*(which(str_detect(codons, "TAG"))-1)
stop3 <- 3*(which(str_detect(codons, "TGA"))-1)
#stop1 <- nchar(str_split(seq_postStart, "TAA")[[1]][1])
#stop2 <- nchar(str_split(seq_postStart, "TAG")[[1]][1])
#stop3 <- nchar(str_split(seq_postStart, "TGA")[[1]][1])
stop_position[i] <- min(stop1, stop2, stop3)
}
gene_length <- nchar(dna_seq$cdna)
start_position <- rep(NA, nrow(dna_seq))
stop_position <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
sst <- strsplit(seq_postStart, "")[[1]]
codons <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
stop1 <- 3*(which(str_detect(codons, "TAA"))-1)
stop2 <- 3*(which(str_detect(codons, "TAG"))-1)
stop3 <- 3*(which(str_detect(codons, "TGA"))-1)
#stop1 <- nchar(str_split(seq_postStart, "TAA")[[1]][1])
#stop2 <- nchar(str_split(seq_postStart, "TAG")[[1]][1])
#stop3 <- nchar(str_split(seq_postStart, "TGA")[[1]][1])
stop_position[i] <- min(c(stop1, stop2, stop3))
}
gene_length <- nchar(dna_seq$cdna)
start_position <- rep(NA, nrow(dna_seq))
stop_position <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
sst <- strsplit(seq_postStart, "")[[1]]
codons <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
stop1 <- min(3*(which(str_detect(codons, "TAA"))-1))
stop2 <- min(3*(which(str_detect(codons, "TAG"))-1))
stop3 <- min(3*(which(str_detect(codons, "TGA"))-1))
#stop1 <- nchar(str_split(seq_postStart, "TAA")[[1]][1])
#stop2 <- nchar(str_split(seq_postStart, "TAG")[[1]][1])
#stop3 <- nchar(str_split(seq_postStart, "TGA")[[1]][1])
stop_position[i] <- min(c(stop1, stop2, stop3))
}
warnings()
min(integer(0))
integer(0) == 0
integer(0) == 1
stop_position
View(dna_seq)
dna_seq[19,]
dna_seq[20,1:4]
min(c(3,5))
min(c(3,5, Inf))
stop_position
dna_seq[24,1:4]
dna_seq[27,1:4]
dna_seq[30,1:4]
dna_seq[20,1:4]
which(stop_position == Inf)
dna_seq[which(stop_position == Inf),1:4]
dna_seq[which(stop_position == Inf) + 1,1:4]
dna_seq[which(stop_position == Inf) - 1,1:4]
dna_seq[which(stop_position == Inf),1:4]
i = 13
start_position[i] <- nchar(str_split(dna_seq$cdna, "ATG")[[i]][1]) + 1
start_position[i] <- nchar(str_split(dna_seq$cdna[i], "ATG")[1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
nchar(str_split(dna_seq$cdna[i], "ATG")[1]) + 1
str_split(dna_seq$cdna[i], "ATG")
start_position[i] <- nchar(str_split(dna_seq$cdna[i], "ATG")[[1]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
sst <- strsplit(seq_postStart, "")[[1]]
codons <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
which(str_detect(codons, "TAA")
)
which(str_detect(codons, "TAG"))
which(str_detect(codons, "TGA"))
dna_seq[13,1:4]
start_position[13]
stop_position[13]
gene_length <- nchar(dna_seq$cdna)
start_position <- rep(NA, nrow(dna_seq))
stop_position <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
start_position[i] <- nchar(str_split(dna_seq$cdna[i], "ATG")[[1]][1]) + 1
seq_postStart <- substr(dna_seq$cdna[i],start_position[i], nchar(dna_seq$cdna[i]))
sst <- strsplit(seq_postStart, "")[[1]]
codons <- paste0(sst[c(TRUE, FALSE, FALSE)], sst[c(FALSE, TRUE, FALSE)],  sst[c(FALSE, FALSE, TRUE)])
stop1 <- min(3*(which(str_detect(codons, "TAA"))-1))
stop2 <- min(3*(which(str_detect(codons, "TAG"))-1))
stop3 <- min(3*(which(str_detect(codons, "TGA"))-1))
#stop1 <- nchar(str_split(seq_postStart, "TAA")[[1]][1])
#stop2 <- nchar(str_split(seq_postStart, "TAG")[[1]][1])
#stop3 <- nchar(str_split(seq_postStart, "TGA")[[1]][1])
stop_position[i] <- min(c(stop1, stop2, stop3))
if(stop_position[i] == Inf) {
stop_position[i] <- nchar(seq_postStart)
}
}
stop_position/3
seqData2 <- data.frame(GeneLength = gene_length,
StartPosition = start_position,
StopPosition = stop_position)
View(seqData2)
rownames(seqData2) <- dna_seq$ensembl_transcript_id
pca <- prcomp(seqData2,
retx = TRUE, # Give rotated variables (PCA loadings)
center = TRUE,
scale = TRUE) # Variables are scaled to unit variance
plotPCA <- as.data.frame(pca$x)
if (all(rownames(plotPCA) == dna_seq$ensembl_transcript_id)){
print("TRUE")
plotPCA <- cbind(plotPCA, dna_seq[,1:4])
}
ggplot(plotPCA, aes(x = PC1, y = PC2, color = hgnc_symbol)) +
geom_point()
ggplot(plotPCA, aes(x = PC4, y = PC3, color = transcript_biotype)) +
geom_point()
ggplot(plotPCA, aes(x = PC1, y = PC2, color = transcript_biotype)) +
geom_point()
plotData <- cbind.data.frame(seqData2, dna_seq)
ggplot(plotData, x = GeneLength, y = StopPosition, color = transcript_biotype) +
geom_point()
ggplot(plotData, aes(x = GeneLength, y = StopPosition, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = StartPosition, y = StopPosition, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = StartPosition/GeneLength, y = StopPosition/GeneLength, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = StartPosition/GeneLength, y = StopPosition/GeneLength, color = hgnc_symbol)) +
geom_point()
ggplot(plotData, aes(x = StartPosition/GeneLength, y = StopPosition/GeneLength, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = StopPosition/GeneLength, color = transcript_biotype)) +
geom_density()
plotData$Coding <- ifelse(plotData$transcript_biotype == "protein_coding", "Yes", "No")
ggplot(plotData, aes(x = StopPosition/GeneLength, color = Coding)) +
geom_density()
View(plotData)
ggplot(plotData, aes(x = StopPosition, color = Coding)) +
geom_density()
load("ENST_seq.RData")
library(tidyverse)
substr("kaas", 1, 2)
dna_seq <- geneAnnotation[(geneAnnotation$hgnc_symbol == "BRCA2") | (geneAnnotation$hgnc_symbol == "CASK") | (geneAnnotation$hgnc_symbol == "BRCA1"),]
gene_length <- nchar(dna_seq$cdna)
stop_position1 <- rep(NA, nrow(dna_seq))
stop_position2 <- rep(NA, nrow(dna_seq))
stop_position3 <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
frame1 <- strsplit(dna_seq$cdna[i], "")[[1]]
codons1 <- paste0(frame1[c(TRUE, FALSE, FALSE)], frame1[c(FALSE, TRUE, FALSE)], frame1[c(FALSE, FALSE, TRUE)])
TAA1 <- min(3*(which(str_detect(codons1, "TAA"))-1))
TAG1 <- min(3*(which(str_detect(codons1, "TAG"))-1))
TGA1 <- min(3*(which(str_detect(codons1, "TGA"))-1))
stop_position1[i] <- min(c(TAA1, TAG1, TGA1))
frame2 <- strsplit(substr(dna_seq$cdna[i],2,nchar(dna_seq$cdna[i])), "")[[1]]
codons2 <- paste0(frame2[c(TRUE, FALSE, FALSE)], frame2[c(FALSE, TRUE, FALSE)], frame2[c(FALSE, FALSE, TRUE)])
TAA2 <- min(3*(which(str_detect(codons2, "TAA"))-1))
TAG2 <- min(3*(which(str_detect(codons2, "TAG"))-1))
TGA2 <- min(3*(which(str_detect(codons2, "TGA"))-1))
stop_position2[i] <- min(c(TAA2, TAG2, TGA2))
frame3 <- strsplit(substr(dna_seq$cdna[i],3,nchar(dna_seq$cdna[i])), "")[[1]]
codons3 <- paste0(frame3[c(TRUE, FALSE, FALSE)], frame3[c(FALSE, TRUE, FALSE)],  frame3[c(FALSE, FALSE, TRUE)])
TAA3 <- min(3*(which(str_detect(codons3, "TAA"))-1))
TAG3 <- min(3*(which(str_detect(codons3, "TAG"))-1))
TGA3 <- min(3*(which(str_detect(codons3, "TGA"))-1))
stop_position3[i] <- min(c(TAA3, TAG3, TGA3))
if(stop_position[i] == Inf) {
stop_position[i] <- nchar(dna_seq$cdna[i])
}
}
gene_length <- nchar(dna_seq$cdna)
stop_position1 <- rep(NA, nrow(dna_seq))
stop_position2 <- rep(NA, nrow(dna_seq))
stop_position3 <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
frame1 <- strsplit(dna_seq$cdna[i], "")[[1]]
codons1 <- paste0(frame1[c(TRUE, FALSE, FALSE)], frame1[c(FALSE, TRUE, FALSE)], frame1[c(FALSE, FALSE, TRUE)])
TAA1 <- min(3*(which(str_detect(codons1, "TAA"))-1))
TAG1 <- min(3*(which(str_detect(codons1, "TAG"))-1))
TGA1 <- min(3*(which(str_detect(codons1, "TGA"))-1))
stop_position1[i] <- min(c(TAA1, TAG1, TGA1))
if(stop_position1[i] == Inf) {
stop_position1[i] <- nchar(dna_seq$cdna[i])
}
frame2 <- strsplit(substr(dna_seq$cdna[i],2,nchar(dna_seq$cdna[i])), "")[[1]]
codons2 <- paste0(frame2[c(TRUE, FALSE, FALSE)], frame2[c(FALSE, TRUE, FALSE)], frame2[c(FALSE, FALSE, TRUE)])
TAA2 <- min(3*(which(str_detect(codons2, "TAA"))-1))
TAG2 <- min(3*(which(str_detect(codons2, "TAG"))-1))
TGA2 <- min(3*(which(str_detect(codons2, "TGA"))-1))
stop_position2[i] <- min(c(TAA2, TAG2, TGA2))
if(stop_position2[i] == Inf) {
stop_position2[i] <- nchar(dna_seq$cdna[i])
}
frame3 <- strsplit(substr(dna_seq$cdna[i],3,nchar(dna_seq$cdna[i])), "")[[1]]
codons3 <- paste0(frame3[c(TRUE, FALSE, FALSE)], frame3[c(FALSE, TRUE, FALSE)],  frame3[c(FALSE, FALSE, TRUE)])
TAA3 <- min(3*(which(str_detect(codons3, "TAA"))-1))
TAG3 <- min(3*(which(str_detect(codons3, "TAG"))-1))
TGA3 <- min(3*(which(str_detect(codons3, "TGA"))-1))
stop_position3[i] <- min(c(TAA3, TAG3, TGA3))
if(stop_position3[i] == Inf) {
stop_position3[i] <- nchar(dna_seq$cdna[i])
}
}
max(c(1,2,3), c(2,3,4))
gene_length <- nchar(dna_seq$cdna)
stop_position1 <- rep(NA, nrow(dna_seq))
stop_position2 <- rep(NA, nrow(dna_seq))
stop_position3 <- rep(NA, nrow(dna_seq))
minStop <- rep(NA, nrow(dna_seq))
maxStop <- rep(NA, nrow(dna_seq))
for (i in 1:nrow(dna_seq)){
frame1 <- strsplit(dna_seq$cdna[i], "")[[1]]
codons1 <- paste0(frame1[c(TRUE, FALSE, FALSE)], frame1[c(FALSE, TRUE, FALSE)], frame1[c(FALSE, FALSE, TRUE)])
TAA1 <- min(3*(which(str_detect(codons1, "TAA"))-1))
TAG1 <- min(3*(which(str_detect(codons1, "TAG"))-1))
TGA1 <- min(3*(which(str_detect(codons1, "TGA"))-1))
stop_position1[i] <- min(c(TAA1, TAG1, TGA1))
if(stop_position1[i] == Inf) {
stop_position1[i] <- nchar(dna_seq$cdna[i])
}
frame2 <- strsplit(substr(dna_seq$cdna[i],2,nchar(dna_seq$cdna[i])), "")[[1]]
codons2 <- paste0(frame2[c(TRUE, FALSE, FALSE)], frame2[c(FALSE, TRUE, FALSE)], frame2[c(FALSE, FALSE, TRUE)])
TAA2 <- min(3*(which(str_detect(codons2, "TAA"))-1))
TAG2 <- min(3*(which(str_detect(codons2, "TAG"))-1))
TGA2 <- min(3*(which(str_detect(codons2, "TGA"))-1))
stop_position2[i] <- min(c(TAA2, TAG2, TGA2))
if(stop_position2[i] == Inf) {
stop_position2[i] <- nchar(dna_seq$cdna[i])
}
frame3 <- strsplit(substr(dna_seq$cdna[i],3,nchar(dna_seq$cdna[i])), "")[[1]]
codons3 <- paste0(frame3[c(TRUE, FALSE, FALSE)], frame3[c(FALSE, TRUE, FALSE)],  frame3[c(FALSE, FALSE, TRUE)])
TAA3 <- min(3*(which(str_detect(codons3, "TAA"))-1))
TAG3 <- min(3*(which(str_detect(codons3, "TAG"))-1))
TGA3 <- min(3*(which(str_detect(codons3, "TGA"))-1))
stop_position3[i] <- min(c(TAA3, TAG3, TGA3))
if(stop_position3[i] == Inf) {
stop_position3[i] <- nchar(dna_seq$cdna[i])
}
maxStop[i] = max(stop_position1[i], stop_position2[i], stop_position3[i])
minStop[i] = min(stop_position1[i], stop_position2[i], stop_position3[i])
}
plotData <- data.frame(stop_position1,
stop_position2,
stop_position3,
maxStop,
minStop)
View(plotData)
plotData <- cbind.data.frame(dna_seq[,1:4], plotData)
View(plotData)
ggplot(plotData, aes(x = maxStop, y = minStop, color = transcript_biotype)) +
geom_point()
plotData <- data.frame(stop_position1,
stop_position2,
stop_position3,
maxStop,
minStop,
gene_length)
plotData <- cbind.data.frame(dna_seq[,1:4], plotData)
ggplot(plotData, aes(x = maxStop/gene_length, y = minStop/gene_length, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = maxStop/gene_length - minStop/gene_length, y = minStop/gene_length, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = maxStop/minStop, y = minStop/gene_length, color = transcript_biotype)) +
geom_point()
ggplot(plotData, aes(x = minStop/maxStop, y = minStop/gene_length, color = transcript_biotype)) +
geom_point()
library(shiny); runApp('DNAShiny.R')
load("ENST_seq.RData")
TFPIann <- geneAnnotation[geneAnnotation$hgnc_symbol == 'TFPI',]
View(TFPIann)
library(biomaRt)
ensembl = useMart("ensembl")
ensembl = useDataset("hsapiens_gene_ensembl",mart=ensembl)
listAttributes(ensembl)
test <- listAttributes(ensembl)
View(test)
View(test)
View(test)
TFPIinfo <- getBM(attributes=c("hgnc_symbol",
"ensembl_gene_id",
"ensembl_transcript_id",
"transcript_biotype",
"cdna"),
filters = 'hgnc_symbol',
values = "TFPI",
mart = ensembl)
View(TFPIinfo)
# Get annotations
TFPIinfo <- getBM(attributes=c("hgnc_symbol",
"ensembl_gene_id",
"ensembl_transcript_id",
"transcript_biotype",
"external_transcript_name",
"cdna"),
filters = 'hgnc_symbol',
values = "TFPI",
mart = ensembl)
View(TFPIann)
View(TFPIinfo)
setwd(paste0(getwd, "/TFPI"))
setwd(paste0(getwd(), "/TFPI"))
getwd()
save(TFPIinfo, file = "TFPIinfo.RData")
runApp('Shiny.R')
runApp('Shiny.R')
library(shiny); runApp('Shiny.R')
CRANpackages <- c("tidyverse",
"stringi",
"plotly",
"DT",
"shiny",
"shinyWidgets",
"shinycssloaders",
"shinythemes",
"stringdist")
#Install (if not yet installed) and load the required packages:
for (pkg in CRANpackages) {
if (!requireNamespace(pkg, quietly = TRUE))
install.packages(pkg, ask = FALSE)
require(as.character(pkg), character.only = TRUE)
}
load("TFPIinfo.RData")
################################################################################
#  UI
################################################################################
ui <- fluidPage(theme = shinytheme("spacelab"),
setBackgroundColor("black"),
navlistPanel(
"Visualizations",
tabPanel("Summary information", value = "summary",
uiOutput("summary_SelectIsoform_ui"),
plotlyOutput("summaryDensity",
width = "1000px",
height="400px")%>%
withSpinner(color="#FFFFFF"),
dataTableOutput("summaryTable",
width = "1000px")%>%
withSpinner(color="#FFFFFF")
),
tabPanel("DNA sequence", value = "DNAseq",
uiOutput("DNAseq_SelectIsoform_ui"),
plotlyOutput("DNAseq",
width = "1000px",
height="300px")%>%
withSpinner(color="#FFFFFF"),
uiOutput("DNAseq_slider_ui")
),
tabPanel("Nucleotide Coordinate Plot", value = "NuCo",
uiOutput("NuCo_SelectIsoform_ui"),
plotlyOutput("NuCo",
width = "1000px",
height="600px")%>%
withSpinner(color="#FFFFFF")
),
tabPanel("Nucleotide Walk Plot", value = "NuWa",
uiOutput("NuWa_SelectIsoform_ui"),
plotlyOutput("NuWa",
width = "1000px",
height="600px") %>%
withSpinner(color="#FFFFFF")
),
tabPanel("Chaos Game", value = "Chaos",
uiOutput("ChGa_SelectIsoform_ui"),
plotlyOutput("ChGa",
width = "1000px",
height="600px") %>%
withSpinner(color="#FFFFFF")
)
))
) #Ui
runApp('Shiny.R')
library(shiny); runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
shiny::runApp()
runApp()
runApp()
load("TFPIinfo.RData")
TFPIinfo <- arrange(TFPIinfo, by = external_transcript_name)
save(TFPIinfo,"TFPIinfo.RData")
save(TFPIinfo,file="TFPIinfo.RData")
shiny::runApp('~/GitHub/ArrayAnalysis_Shiny')
setwd("C:/Users/jarno/GitHub/ArrayAnalysis")
install.packages("roxygen2")
setwd("C:/Users/jarno/GitHub/ArrayAnalysis")
devtools::create("Package")
devtools::document()
devtools::document("Package")
devtools::document("Package")
runApp('~/GitHub/ArrayAnalysis_Shiny')
